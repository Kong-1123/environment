package com.xdmd.hbkj.Shiro;


import com.xdmd.hbkj.User.Mapper.UserMapper;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.*;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.authz.SimpleAuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

@Component
public class CustomRealm extends AuthorizingRealm {
    private final UserMapper userMapper;

    @Autowired
    public CustomRealm(UserMapper userMapper) {
        this.userMapper = userMapper;
    }

    /**
     * 获取身份验证信息
     * Shiro中，最终是通过 Realm 来获取应用程序中的用户、角色及权限信息的。
     *
     * @param authenticationToken 用户身份信息 token
     * @return 返回封装了用户信息的 AuthenticationInfo 实例
     */
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        System.out.println("————身份认证方法————");
        UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;

        //判断用户是否存在
        //String username = userMapper.queryUsername(token.getUsername());
        //String username = String.valueOf(token.getUsername());
        String password = String.valueOf(token.getPassword());

//        if(username==null){
//            throw new AccountException("用户不存在");
//        }else {
//            //判断用户名与密码是否正确 ，String.valueof 的意思是，把里面内容转换成string类型
//            User user = userMapper.login(token.getUsername(),String.valueOf(token.getPassword()));
//            if(user ==null){
//                throw new AccountException("密码错误");
//            }
//        }
//        String password = userMapper.getPassword(username);

        return new SimpleAuthenticationInfo(token.getPrincipal(), password, getName());


//        // 从数据库获取对应用户名密码的用户
//        String password = userMapper.getPassword(token.getUsername());
//        if (null == password) {
//            throw new AccountException("用户名不正确");
//        } else if (!password.equals(new String((char[]) token.getCredentials()))) {
//            throw new AccountException("密码不正确");
//        }
//        return new SimpleAuthenticationInfo(token.getPrincipal(), password, getName());
    }

    /**
     * 获取授权信息
     *
     * @param principalCollection
     * @return
     */
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        System.out.println("————权限认证————");
        String username = (String) SecurityUtils.getSubject().getPrincipal();
        SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();

        //获取用户的权限
        List<String> userPermission = userMapper.getPermission(username);

        Set<String> set = new HashSet<String>();
        //将需要的权限封装到set中
        for (String s : userPermission) {
            set.add(s);
        }
        info.setRoles(set);

        return info;

//        //获得该用户角色
//        String role = userMapper.getRole(username);
//        Set<String> set = new HashSet<>();
//        //需要将 role 封装到 Set 作为 info.setRoles() 的参数
//        set.add(role);
//        //设置该用户拥有的角色
//        info.setRoles(set);
//        return info;
    }
}
